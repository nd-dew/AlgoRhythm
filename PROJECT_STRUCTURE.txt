🎵 Strudel AI Live Coding Agent - Project Structure
==================================================

strudel-ai-live-coding/
│
├── 📄 Core Files
│   ├── strudel_ai_agent.py        # Main AI agent (Python)
│   ├── strudel_server.js          # Web server (Node.js/Express)
│   └── demo_examples.py           # Demo prompts and examples
│
├── 🌐 Web Interface
│   └── public/
│       └── index.html             # Browser-based interface with Strudel player
│
├── ⚙️  Configuration Files
│   ├── package.json               # Node.js dependencies
│   ├── requirements.txt           # Python dependencies
│   └── .env.example               # Environment variable template
│
├── 📚 Documentation
│   ├── README.md                  # Main documentation
│   ├── USAGE_GUIDE.md            # Detailed usage instructions
│   └── PROJECT_STRUCTURE.txt     # This file
│
└── 🔧 Utility Scripts
    ├── quickstart.sh              # Quick setup script
    └── test_system.sh             # System test script

==================================================
Component Overview
==================================================

1. strudel_ai_agent.py
   - Main AI agent using OpenAI GPT-4
   - Generates Strudel code from natural language
   - Handles conversation history and context
   - Interactive and command-line modes
   - Communicates with Strudel server via HTTP

2. strudel_server.js
   - Express.js web server
   - Serves the web interface
   - Handles code updates via REST API
   - Manages current code state
   - Provides health check endpoint

3. public/index.html
   - Beautiful web interface
   - Embedded Strudel player
   - Real-time code display
   - Auto-polling for updates
   - Play/Stop/Refresh controls

4. demo_examples.py
   - Pre-made prompt examples
   - Genre-specific demonstrations
   - Automated demo sessions
   - Learning resource

==================================================
Data Flow
==================================================

User Input (CLI)
    ↓
AI Agent (Python)
    ↓ (HTTP POST)
Strudel Server (Node.js)
    ↓ (HTTP GET polling)
Web Interface (Browser)
    ↓
Strudel Player (Audio Output)

==================================================
API Endpoints
==================================================

GET  /health          - Health check
GET  /code            - Get current code
POST /update          - Update code
GET  /                - Serve web interface

==================================================
File Sizes (Approximate)
==================================================

strudel_ai_agent.py:   ~9 KB    (250 lines)
strudel_server.js:     ~2 KB    (60 lines)
public/index.html:     ~10 KB   (350 lines)
demo_examples.py:      ~3 KB    (100 lines)
README.md:             ~8 KB
USAGE_GUIDE.md:        ~9 KB

Total Code: ~40 KB

==================================================
Dependencies
==================================================

Python:
  - openai >= 1.0.0
  - requests >= 2.31.0

Node.js:
  - express ^4.18.2
  - cors ^2.8.5

External:
  - Strudel (via CDN in browser)
  - OpenAI API (GPT-4)

==================================================
Ports Used
==================================================

3000    - Strudel web server (HTTP)

==================================================
System Requirements
==================================================

- Python 3.8+
- Node.js 16+
- Modern web browser (Chrome, Firefox, Safari, Edge)
- Internet connection (for OpenAI API and Strudel CDN)
- OpenAI API key

==================================================
Key Features
==================================================

✓ Natural language to code generation
✓ Real-time code updates while playing
✓ Genre-aware AI
✓ Interactive conversation mode
✓ Beautiful web interface
✓ Automatic synchronization
✓ Context-aware updates
✓ Multiple usage modes

==================================================
Architecture Pattern
==================================================

This project follows a microservices architecture:

- AI Service: Python-based code generation
- Web Service: Node.js server for code management
- Client: Browser-based player and visualization

Communication: REST API (HTTP/JSON)
State Management: Server-side code storage
Real-time Updates: Client-side polling

==================================================

